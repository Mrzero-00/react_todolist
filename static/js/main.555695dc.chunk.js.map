{"version":3,"sources":["components/TodolistForm.js","TodoContext.js","components/TodolistHead.js","components/Todolistitems.js","components/Todolistlist.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["MainBlock","styled","div","TodolistForm","children","initdata","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodostateContext","createContext","TododipatchConstext","Todonextid","TodoProvider","useReducer","dispatch","nextid","useRef","Provider","value","useTodostate","context","useContext","useTododispatch","HeadBlock","TodolistHead","count_todo","today","Date","currentday","toLocaleDateString","year","month","day","dayday","weekday","count","length","className","CheckIcon","props","css","TextBlock","RemoveIcon","ItemListBlock","Todolistitems","onClick","ListBlock","Todolistlist","todos","key","CreateBtn","open","Inputform","Inputformarea","form","Input","input","TodoCreate","useState","setopen","newtodo","useTodonextid","todotext","settodotext","onSubmit","e","preventDefault","newtodotext","current","onChange","target","placeholder","autoFocus","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.555695dc.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst MainBlock = styled.div`\n  width: 512px;\n  height: 768px;\n  border-radius: 16px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.4);\n  background-color: #fff;\n\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n\n  flex-direction: column;\n  position: relative;\n`;\n\nfunction TodolistForm({ children }) {\n  return (\n    <>\n      <MainBlock>{children}</MainBlock>\n    </>\n  );\n}\n\nexport default TodolistForm;\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initdata = [\n  {\n    id: 1,\n    text: '공부하기',\n    done: false,\n  },\n];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'Create':\n      return state.concat(action.todo);\n    case 'Toggle':\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo,\n      );\n    case 'Remove':\n      return state.filter((todo) => todo.id !== action.id);\n    default:\n      throw new Error('unhandle action');\n  }\n}\n\nconst TodostateContext = createContext();\nconst TododipatchConstext = createContext();\nconst Todonextid = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initdata);\n  const nextid = useRef(2);\n  return (\n    <TodostateContext.Provider value={state}>\n      <TododipatchConstext.Provider value={dispatch}>\n        <Todonextid.Provider value={nextid}>{children}</Todonextid.Provider>\n      </TododipatchConstext.Provider>\n    </TodostateContext.Provider>\n  );\n}\n\nexport function useTodostate() {\n  const context = useContext(TodostateContext);\n  if (!context) {\n    throw new Error(\"can't find TodoProvider\");\n  }\n  return context;\n}\n\nexport function useTododispatch() {\n  const context = useContext(TododipatchConstext);\n  if (!context) {\n    throw new Error(\"can't find TodoProvider\");\n  }\n  return context;\n}\n\nexport function useTodonextid() {\n  const context = useContext(Todonextid);\n\n  if (!context) {\n    throw new Error(\"can't find TodoProvider\");\n  }\n  return context;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodostate } from '../TodoContext';\n\nconst HeadBlock = styled.div`\n  margin-top: 48px;\n  margin-left: 32px;\n  margin-right: 32px;\n  margin-bottom: 12px;\n  border-bottom: 1px solid #e9ecef;\n\n  .current_date {\n    font-size: 48px;\n    color: #212529;\n  }\n  .today {\n    font-size: 28px;\n    color: #adb5bd;\n  }\n  .count_todo {\n    margin-top: 20px;\n    font-size: 16px;\n    color: #ff6b6b;\n    font-weight: 700;\n  }\n`;\n\nfunction TodolistHead() {\n  const count_todo = useTodostate();\n  const today = new Date();\n  const currentday = today.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n\n  const dayday = today.toLocaleDateString('ko-KR', {\n    weekday: 'long',\n  });\n  const count = count_todo.filter((todo) => todo.done === false).length;\n\n  return (\n    <HeadBlock>\n      <h1 className=\"current-date\">{currentday}</h1>\n      <div className=\"today\">{dayday}</div>\n      <div className=\"count_todo\">할일 {count}개남음</div>\n    </HeadBlock>\n  );\n}\n\nexport default TodolistHead;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTododispatch } from '../TodoContext';\n\nconst CheckIcon = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  border: 1px solid #ced4da;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  ${(props) =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\nconst TextBlock = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  margin-left: 10px;\n  ${(props) =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nconst RemoveIcon = styled.div`\n    display:flex;\n    align-items:center;\n    justify-content :center;\n    color:#dee2e6;\n    font-size : 24px \n    cursor:pointer;\n    opacity: 0;\n    transition : 0.3s;\n    &:hover{\n        color:#ff6b6b;\n        transform : scale(1.3);\n    }\n`;\n\nconst ItemListBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${RemoveIcon} {\n      opacity: 1;\n      cursor: pointer;\n    }\n  }\n`;\n\nfunction Todolistitems({ id, done, text }) {\n  const dispatch = useTododispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: 'Toggle',\n      id,\n    });\n  };\n\n  const onRemove = () =>\n    dispatch({\n      type: 'Remove',\n      id,\n    });\n\n  return (\n    <ItemListBlock>\n      <CheckIcon done={done} onClick={onToggle}>\n        {done && <MdDone />}\n      </CheckIcon>\n      <TextBlock done={done}>{text}</TextBlock>\n      <RemoveIcon onClick={onRemove}>\n        <MdDelete />\n      </RemoveIcon>\n    </ItemListBlock>\n  );\n}\n\nexport default Todolistitems;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Todolistitems from './Todolistitems';\nimport { useTodostate } from '../TodoContext';\n\nconst ListBlock = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px 30px;\n  padding-bottom: 48px;\n\n  div {\n  }\n`;\n\nfunction Todolistlist() {\n  const todos = useTodostate();\n  return (\n    <ListBlock>\n      {todos.map((todos) => (\n        <Todolistitems\n          text={todos.text}\n          done={todos.done}\n          key={todos.id}\n          id={todos.id}\n        />\n      ))}\n    </ListBlock>\n  );\n}\n\nexport default Todolistlist;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTododispatch, useTodonextid } from '../TodoContext';\n\nconst CreateBtn = styled.div`\n  background: #38d9a9;\n\n  position: absolute;\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n\n  left: 50%;\n  bottom: 0;\n  &:hover {\n    background: #63e6be;\n  }\n\n  &:active {\n    background: #207997;\n  }\n  transform: translate(-50%, 50%);\n\n  z-index: 5;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  font-size: 60px;\n  color: #fff;\n\n  border: none;\n  outline: none;\n  transition: 0.15s all ease-in;\n\n  ${(props) =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\nconst Inputform = styled.div`\n  width: 100%;\n  left: 0;\n  bottom: 0;\n  position: absolute;\n`;\n\nconst Inputformarea = styled.form`\n  padding: 32px;\n  background-color: #f8f9fa;\n  padding-bottom: 72px;\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nfunction TodoCreate() {\n  const [open, setopen] = useState(false);\n  const newtodo = useTododispatch();\n  const nextid = useTodonextid();\n  const [todotext, settodotext] = useState('');\n\n  const Inputer = (e) => {\n    settodotext(e.target.value);\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n    const newtodotext = {\n      id: nextid.current,\n      text: todotext,\n      done: false,\n    };\n    newtodo({\n      type: 'Create',\n      todo: newtodotext,\n    });\n    nextid.current += 1;\n    settodotext('');\n  };\n\n  const onToggle = () => {\n    setopen(!open);\n  };\n\n  return (\n    <>\n      {open && (\n        <Inputform>\n          <Inputformarea onSubmit={submit}>\n            <Input\n              onChange={Inputer}\n              placeholder=\"할일을 입력후 Enter를 눌르세요\"\n              autoFocus\n              value={todotext}\n            />\n          </Inputformarea>\n        </Inputform>\n      )}\n      <CreateBtn onClick={onToggle} open={open}>\n        <MdAdd />\n      </CreateBtn>\n    </>\n  );\n}\n\nexport default TodoCreate;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodolistForm from './components/TodolistForm';\nimport TodolistHead from './components/TodolistHead';\nimport Todolistlist from './components/Todolistlist';\nimport TodoCreate from './components/TodoCreate';\nimport { useTodostate, TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }  \n\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodolistForm>\n        <TodolistHead />\n        <Todolistlist />\n        <TodoCreate />\n      </TodolistForm>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}